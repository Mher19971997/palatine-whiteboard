version: '3.8'

networks:
  app-network:
    driver: bridge

volumes:
  db-data:
  pgadmin-data:

services:
  redis:
    image: redis:latest
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - '6379:6379'
    env_file:
      - ./.env
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      retries: 5

  postgres:
    image: postgres
    container_name: postgres_container
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data
    ports:
      - '5433:5432'
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql 
    command: ["postgres", "-c", "log_statement=all"]
    env_file:
      - ./.env
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - ./.env
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    networks:
      - app-network

  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   env_file:
  #     - ./.env
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     backend:
  #       condition: service_started
  #   networks:
  #     - app-network
