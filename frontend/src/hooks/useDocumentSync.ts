import { useEffect, useRef } from "react";
import * as Y from "yjs";
import { useAuth } from "../contexts/AuthContext";
import { useDocument } from "../hooks/useApi";
import { io, Socket } from "socket.io-client";

// ------------------- –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è -------------------
export function uint8ArrayToBase64(bytes: Uint8Array): string {
  let binary = "";
  const chunkSize = 0x8000; // 32KB
  for (let i = 0; i < bytes.length; i += chunkSize) {
    const chunk = bytes.subarray(i, i + chunkSize);
    binary += String.fromCharCode(...chunk);
  }
  return btoa(binary);
}

export function base64ToUint8Array(base64: string): Uint8Array {
  const binary = atob(base64);
  const len = binary.length;
  const bytes = new Uint8Array(len);
  for (let i = 0; i < len; i++) {
    bytes[i] = binary.charCodeAt(i);
  }
  return bytes;
}

interface UseDocumentSyncProps {
  doc: Y.Doc;
  onDocumentUpdate?: (update: Uint8Array) => void;
}

export function useDocumentSync({ doc, onDocumentUpdate }: UseDocumentSyncProps) {
  const { isAuthenticated } = useAuth();
  const { data: documentData, refetch } = useDocument("");
  const socketRef = useRef<Socket | null>(null);
  const isInitialLoadRef = useRef(true);

  // ------------------- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ -------------------
  useEffect(() => {
    if (!doc || !documentData || !isInitialLoadRef.current) return;

    try {
      if (documentData.documentData) {
        const binaryData = base64ToUint8Array(documentData.documentData);

        doc.transact(() => {
          Y.applyUpdate(doc, binaryData);
        });

        console.log("‚úÖ Document loaded from server");
      }
      isInitialLoadRef.current = false;
    } catch (error) {
      console.error("‚ùå Failed to load document:", error);
    }
  }, [doc, documentData]);

  // ------------------- WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ -------------------
  useEffect(() => {
    if (!isAuthenticated) return;

    const accessToken = localStorage.getItem("access_token");
    if (!accessToken) return;

    const socket = io("http://localhost:6001", {
      query: { token: accessToken },
      transports: ["websocket"],
    });
    socketRef.current = socket;

    socket.on("connect", () => {
      console.log("üîå WS connected");
    });

    socket.on("disconnect", (reason) => {
      console.log("‚ö†Ô∏è WS disconnected:", reason);
    });

    // –ü—Ä–∏—à–µ–ª –∞–ø–¥–µ–π—Ç –æ—Ç –¥—Ä—É–≥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    socket.on("documentUpdated", (data: { userUuid: string; updateData: string }) => {
      try {
        const binary = base64ToUint8Array(data.updateData);
        console.log(55555, binary);

        // –ø—Ä–∏–º–µ–Ω—è–µ–º –∫–∞–∫ "remote"
        doc.transact(() => {
          Y.applyUpdate(doc, binary);
        }, "remote");

        console.log("üì• Applied remote update");

        if (onDocumentUpdate) {
          onDocumentUpdate(binary);
        }
      } catch (error) {
        console.error("‚ùå Failed to apply remote update:", error);
      }
    });
    function bufferToBase64(bufferObj: { type: string; data: number[] }) {
      const uint8 = new Uint8Array(bufferObj.data);
      const chunkSize = 0x8000; // 32KB
      let binary = '';
      for (let i = 0; i < uint8.length; i += chunkSize) {
        const chunk = uint8.subarray(i, i + chunkSize);
        binary += String.fromCharCode(...chunk);
      }
      return btoa(binary);
    }
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const updateHandler = (update: Uint8Array, origin: any) => {
      if (origin === "remote") return; // –Ω–µ —à–ª–µ–º —Å–≤–æ–∏ –∂–µ –∞–ø–¥–µ–π—Ç—ã

      try {
        console.log(update, 44444444);
        const base64Data = bufferToBase64({ type: 'Buffer', data: Array.from(update) });
        socket.emit("updateDocument", { updateData: base64Data });
        console.log("üì§ Sent local update to server", update);
      } catch (error) {
        console.error("‚ùå Failed to send update:", error);
      }
    };

    doc.on("update", updateHandler);

    return () => {
      doc.off("update", updateHandler);
      socket.disconnect();
      socketRef.current = null;
    };
  }, [doc, isAuthenticated, onDocumentUpdate]);

  // ------------------- –ú–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ -------------------
  const reloadDocument = async () => {
    try {
      const freshData = await refetch();

      if (freshData?.data?.documentData) {
        const binary = base64ToUint8Array(freshData.data.documentData);

        doc.transact(() => {
          // –Ω–µ –¥–µ–ª–∞–π doc.destroy() ‚Äî –∏–Ω–∞—á–µ –ø–æ—Ç–µ—Ä—è–µ—à—å —Å—Å—ã–ª–∫–∏
          doc.clear(); // –∏–ª–∏ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ö –ø—Ä–∏–º–µ–Ω–∏—Ç—å state
          Y.applyUpdate(doc, binary);
        });

        console.log("üîÑ Document reloaded");
      }
    } catch (error) {
      console.error("‚ùå Failed to reload document:", error);
    }
  };

  return {
    reloadDocument,
    socket: socketRef.current,
    isConnected: socketRef.current?.connected || false,
  };
}
